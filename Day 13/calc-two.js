var fs = require('fs');
var readline = require('readline-sync');

fs.readFile("./input.txt", {encoding: "utf8"}, function(err, data) {
	if(err) throw err;

	var memory = data.split(',').map(possible_string => possible_string*1);
	var inputsplit('');
	var output = [];
	memory[0] = 2;

	arcade (memory, input, output);
});

var USE_INPUT = true;
var MANUAL = false;

var input_history = [];
function arcade ( memory, input, output ) {
	var IP = 0;
	var BASE = 0;
	function read ( par, src ) {
		return par == 0 ? memory[src] :
					 par == 1 ? src :
					 par == 2 ? memory[BASE+src]
					 : "ERROR";
	}
	function pardest ( par, dest ) {
		return par == 0 ? dest :
					 par == 2 ? BASE+dest
					 : "ERROR";
	}
	function ADD ( par1, src1, par2, src2, pard, dest ) {
		memory[pardest(pard, dest)] = read(par1, src1) + read(par2, src2);
		IP += 4;
	}
	function MULT ( par1, src1, par2, src2, pard, dest ) {
		memory[pardest(pard, dest)] = read(par1, src1) * read(par2, src2);
		IP += 4;
	}
	function INPUT ( pard, dest ) {
		for ( var iy = 0 ; iy <= width ; ++iy )
			console.log(screen[iy].join('').replace(/0/g, ' '));
		var joystick;
		if ( USE_INPUT && input.length ) {
			var symbol = input.shift();
			joystick = symbol == '-' ? -1 :
								 symbol == '+' ? 1 :
								 0;
		} else {
			if ( MANUAL )
				joystick = readline.question("Input: ");
			else
				joystick = objects.paddle.x < objects.ball.x ? 1 :
									 objects.paddle.x > objects.ball.x ? -1 :
									 0;
			input_history.push(['-', '.', '+'][joystick*1+1]);
		}
		memory[pardest(pard, dest)] = joystick;
		IP += 2;
	}

	var width = 0;
	var objects = {};
	var screen = [];
	function OUTPUT ( par, src ) {
		output.push(read(par, src));

		if ( output.length >= 3 ) {
			var x = output.shift();
			var y = output.shift();
			var id = output.shift();

			if (y > width) width = y;
			if (screen[y] === undefined) screen[y] = [];
			screen[y][x] = id;

			if ( x == -1 ) console.log(`SCORE: ${id}`);
			if ( id == 3 ) objects.paddle = { 'x' : x, 'y' : y };
			if ( id == 4 ) objects.ball = { 'x' : x, 'y' : y };
		}

		IP += 2;
	}
	function JUMP_IF_TRUE ( parc, cond, parj, jump ) {
		if ( read(parc, cond) != 0 )
			IP = read(parj, jump);
		else
			IP += 3;
	}
	function JUMP_IF_FALSE ( parc, cond, parj, jump ) {
		if ( read(parc, cond) == 0 )
			IP = read(parj, jump);
		else
			IP += 3;
	}
	function LESS_THAN ( par1, src1, par2, src2, pard, dest ) {
		memory[pardest(pard, dest)] = (read(par1, src1) < read(par2, src2));
		IP += 4;
	}
	function EQUALS ( par1, src1, par2, src2, pard, dest ) {
		memory[pardest(pard, dest)] = (read(par1, src1) == read(par2, src2));
		IP += 4;
	}
	function REBASE ( par, src ) {
		BASE += read(par, src);
		IP += 2;
	}

	while ( true ) {
		// console.log(`[${BASE} | ${IP}]; ${memory.slice(IP, IP+4)}`);
		switch ( memory[IP] % 100 ) {
			case 1: ADD          (Math.floor(memory[IP]/100)%10, memory[IP+1], Math.floor(memory[IP]/1000)%10, memory[IP+2], Math.floor(memory[IP]/10000)%10, memory[IP+3]); break;
			case 2: MULT         (Math.floor(memory[IP]/100)%10, memory[IP+1], Math.floor(memory[IP]/1000)%10, memory[IP+2], Math.floor(memory[IP]/10000)%10, memory[IP+3]); break;
			case 3: INPUT        (Math.floor(memory[IP]/100)%10, memory[IP+1]                                                                                             ); break;
			case 4: OUTPUT       (Math.floor(memory[IP]/100)%10, memory[IP+1]                                                                                             ); break;
			case 5: JUMP_IF_TRUE (Math.floor(memory[IP]/100)%10, memory[IP+1], Math.floor(memory[IP]/1000)%10, memory[IP+2]                                               ); break;
			case 6: JUMP_IF_FALSE(Math.floor(memory[IP]/100)%10, memory[IP+1], Math.floor(memory[IP]/1000)%10, memory[IP+2]                                               ); break;
			case 7: LESS_THAN    (Math.floor(memory[IP]/100)%10, memory[IP+1], Math.floor(memory[IP]/1000)%10, memory[IP+2], Math.floor(memory[IP]/10000)%10, memory[IP+3]); break;
			case 8: EQUALS       (Math.floor(memory[IP]/100)%10, memory[IP+1], Math.floor(memory[IP]/1000)%10, memory[IP+2], Math.floor(memory[IP]/10000)%10, memory[IP+3]); break;
			case 9: REBASE       (Math.floor(memory[IP]/100)%10, memory[IP+1]                                                                                             ); break;
			case 99:
				console.log(input_history.join(''));
			return;
			default:
				console.log(`UNSUPPORTED OPERATION ${memory[IP]} at IP(${IP})`);
				console.log(memory);
				return;
		}
	}
}
